/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package os.InterfazGrafica;

import java.io.File;
import java.util.concurrent.ConcurrentHashMap;
import javax.swing.JOptionPane;
import os.Archivo.*;
import os.Tokens.*;
import os.ManejadoresAnalizador.*;
import java.util.*;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Collection;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JFileChooser;

/**
 *
 * @author Oscar
 */
public class Ventana extends javax.swing.JFrame {
     private String archivoALeer;
    ConcurrentHashMap<Integer, TextoIDE> estadoPrevio;
    ConcurrentHashMap<Integer, TextoIDE> estadoActual;
    public String texto="";

    public static File archivo;
    boolean programaGuardado=true;
    boolean programanoenCero=true;
    GuardarDatos guardar = new GuardarDatos();
  
    public Ventana() {
        initComponents();
        this.setLocationRelativeTo(null);
        NumeroLinea numeroLinea=new NumeroLinea(textoAnalizar);
        jScrollPane1.setRowHeaderView(numeroLinea);
        estadoPrevio = new ConcurrentHashMap<>();
        estadoActual = new ConcurrentHashMap<>();
        areaErrores.setEditable(false);
        analisisS.setVisible(false);
        reporteErrores.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textoAnalizar = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        areaErrores = new javax.swing.JTextArea();
        posicionText = new javax.swing.JLabel();
        reporteTokens = new javax.swing.JButton();
        analizadorLexico = new javax.swing.JButton();
        analisisS = new javax.swing.JButton();
        salir1 = new javax.swing.JButton();
        reporteErrores = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        copiarText = new javax.swing.JMenuItem();
        pegarTexto = new javax.swing.JMenuItem();
        deshacer = new javax.swing.JMenuItem();
        rehace = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setForeground(java.awt.SystemColor.activeCaption);

        jLabel2.setFont(new java.awt.Font("Purisa", 3, 48)); // NOI18N
        jLabel2.setText("Analizador");

        jScrollPane1.setForeground(new java.awt.Color(255, 153, 51));

        textoAnalizar.setColumns(20);
        textoAnalizar.setFont(new java.awt.Font("Lucida Console", 0, 13)); // NOI18N
        textoAnalizar.setRows(5);
        textoAnalizar.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                textoAnalizarCaretUpdate(evt);
            }
        });
        textoAnalizar.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                textoAnalizarPropertyChange(evt);
            }
        });
        textoAnalizar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textoAnalizarKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textoAnalizarKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textoAnalizarKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(textoAnalizar);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 764, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(228, 228, 228)
                        .addComponent(jLabel2)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.setForeground(java.awt.SystemColor.activeCaption);

        jLabel3.setFont(new java.awt.Font("Consolas", 3, 48)); // NOI18N
        jLabel3.setText("Errores");

        areaErrores.setColumns(20);
        areaErrores.setFont(new java.awt.Font("Ubuntu", 3, 15)); // NOI18N
        areaErrores.setRows(5);
        jScrollPane2.setViewportView(areaErrores);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(493, 493, 493))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(171, 171, 171)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        posicionText.setText("Posicion:");

        reporteTokens.setFont(new java.awt.Font("Ubuntu", 3, 24)); // NOI18N
        reporteTokens.setText("Reporte Tokens");
        reporteTokens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reporteTokensActionPerformed(evt);
            }
        });
        reporteTokens.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                reporteTokensKeyPressed(evt);
            }
        });

        analizadorLexico.setFont(new java.awt.Font("Ubuntu", 3, 24)); // NOI18N
        analizadorLexico.setText("Analizador Léxico");
        analizadorLexico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analizadorLexicoActionPerformed(evt);
            }
        });
        analizadorLexico.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                analizadorLexicoKeyPressed(evt);
            }
        });

        analisisS.setFont(new java.awt.Font("Ubuntu", 3, 24)); // NOI18N
        analisisS.setText("Anlizador Sintáctico");
        analisisS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analisisSActionPerformed(evt);
            }
        });
        analisisS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                analisisSKeyPressed(evt);
            }
        });

        salir1.setFont(new java.awt.Font("Consolas", 3, 24)); // NOI18N
        salir1.setText("Salir");
        salir1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salir1ActionPerformed(evt);
            }
        });
        salir1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                salir1KeyPressed(evt);
            }
        });

        reporteErrores.setFont(new java.awt.Font("Consolas", 1, 24)); // NOI18N
        reporteErrores.setText("Reporte de Errores");

        jMenu1.setText("Nuevo");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Abrir");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Guardar");

        jMenuItem2.setText("Guardar Archivo");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuItem3.setText("Guardar Como");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuBar1.add(jMenu3);

        jMenu5.setText("Acciones");

        copiarText.setText("Copiar");
        copiarText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                copiarTextMouseClicked(evt);
            }
        });
        copiarText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copiarTextActionPerformed(evt);
            }
        });
        jMenu5.add(copiarText);

        pegarTexto.setText("Pegar");
        pegarTexto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pegarTextoMouseClicked(evt);
            }
        });
        pegarTexto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pegarTextoActionPerformed(evt);
            }
        });
        jMenu5.add(pegarTexto);

        deshacer.setText("Deshacer");
        deshacer.setEnabled(false);
        deshacer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deshacerActionPerformed(evt);
            }
        });
        jMenu5.add(deshacer);

        rehace.setText("Rehacer");
        rehace.setEnabled(false);
        rehace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rehaceActionPerformed(evt);
            }
        });
        jMenu5.add(rehace);

        jMenuBar1.add(jMenu5);

        jMenu4.setText("Acerca de");
        jMenu4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu4MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 561, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(analisisS, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                            .addComponent(reporteTokens, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(analizadorLexico, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(salir1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(561, 561, 561)
                                .addComponent(posicionText, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(reporteErrores, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(analisisS, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(analizadorLexico, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(reporteTokens, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(salir1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(posicionText)
                        .addGap(25, 25, 25)
                        .addComponent(reporteErrores, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
        int response2 = JOptionPane.showConfirmDialog(this,"¿Quieres generar una nueva ventana de IDE?", "NUEVO",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        boolean verificar=textoAnalizar.getText().isEmpty();
        if (response2==JOptionPane.YES_OPTION){
            if(programaGuardado==false&&(verificar==false)){
                if(programanoenCero==true){
                    int response = JOptionPane.showConfirmDialog(this,"¿Quieres Guardar los Cambios realizados en el archivo?", "GUARDAR",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
                    if (response==JOptionPane.YES_OPTION){
                        JFileChooser seleccionar = new JFileChooser();
                        if(seleccionar.showDialog(null, "Guardar")==JFileChooser.APPROVE_OPTION){
                            archivo= seleccionar.getSelectedFile();
                            try {
                                String texto= textoAnalizar.getText();
                                String mensaje= guardar.GuardarArchivo(archivo, texto);
                                if(mensaje!=null){
                                    JOptionPane.showMessageDialog(null, mensaje);
                                    deshacer.setEnabled(false);
                                    rehace.setEnabled(false);
                                    estadoActual.clear();
                                    estadoPrevio.clear();
                                    programanoenCero=true;
                                    programaGuardado=true;
                                    this.reiniciarBotones();
                                    textoAnalizar.setText("");
                                    JOptionPane.showMessageDialog(this, "Archivo Nuevo Generado Correctamente", "NUEVO ARCHIVO", JOptionPane.INFORMATION_MESSAGE);
                                } else {
                                    JOptionPane.showMessageDialog(null, "Archivo Incompatible");
                                }

                            } catch (IOException ex) {
                                Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        }
                    } else {
                        deshacer.setEnabled(false);
                        rehace.setEnabled(false);
                        estadoActual.clear();
                        estadoPrevio.clear();
                        programanoenCero=true;
                        this.reiniciarBotones();
                        programaGuardado=true;
                        textoAnalizar.setText("");
                        JOptionPane.showMessageDialog(this, "Archivo Nuevo Generado Correctamente", "NUEVO ARCHIVO", JOptionPane.INFORMATION_MESSAGE);
                    }
                } else {
                    int response = JOptionPane.showConfirmDialog(this,"¿Quieres Guardar los Cambios realizados en el archivo?", "GUARDAR",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
                    if (response==JOptionPane.YES_OPTION){
                        try {
                            guardar.GuardarArchivoExistente(textoAnalizar.getText(), archivo);
                        } catch (IOException ex) {
                            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        JOptionPane.showMessageDialog(this, "Cambios guardados exitosamente :)");
                        deshacer.setEnabled(false);
                        rehace.setEnabled(false);
                        estadoActual.clear();
                        estadoPrevio.clear();
                        programanoenCero=true;
                        programaGuardado=true;
                        this.reiniciarBotones();
                        textoAnalizar.setText("");
                        JOptionPane.showMessageDialog(this, "Archivo Nuevo Generado Correctamente", "NUEVO ARCHIVO", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        deshacer.setEnabled(false);
                        rehace.setEnabled(false);
                        estadoActual.clear();
                        estadoPrevio.clear();
                        programanoenCero=true;
                        programaGuardado=true;
                        textoAnalizar.setText("");
                        this.reiniciarBotones();
                    }

                }
            } else{
                JOptionPane.showMessageDialog(this, "Archivo Nuevo Generado Correctamente", "NUEVO ARCHIVO", JOptionPane.INFORMATION_MESSAGE);
                deshacer.setEnabled(false);
                rehace.setEnabled(false);
                estadoActual.clear();
                estadoPrevio.clear();
                programanoenCero=true;
                programaGuardado=true;
                textoAnalizar.setText("");
                this.reiniciarBotones();
            }
        }
    }//GEN-LAST:event_jMenu1MouseClicked

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed

    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        int response2 = JOptionPane.showConfirmDialog(this,"¿Quieres Abrir un archivo de texto nuevo?", "ABRIR",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        boolean verificar=textoAnalizar.getText().isEmpty();
        if (response2==JOptionPane.YES_OPTION){
            if(programaGuardado==false&&(verificar==false)){
                if(programanoenCero==true){
                    int response = JOptionPane.showConfirmDialog(this,"¿Quieres Guardar los Cambios realizados en el archivo?", "GUARDAR",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
                    if (response==JOptionPane.YES_OPTION){
                        JFileChooser seleccionar = new JFileChooser();
                        if(seleccionar.showDialog(null, "Guardar")==JFileChooser.APPROVE_OPTION){
                            archivo= seleccionar.getSelectedFile();
                            try {
                                String texto= textoAnalizar.getText();
                                String mensaje= guardar.GuardarArchivo(archivo, texto);
                                if(mensaje!=null){
                                    JOptionPane.showMessageDialog(null, mensaje);
                                    deshacer.setEnabled(false);
                                    rehace.setEnabled(false);
                                    estadoActual.clear();
                                    estadoPrevio.clear();
                                    this.reiniciarBotones();
                                    programanoenCero=false;
                                    programaGuardado=true;
                                    textoAnalizar.setText("");
                                    this.cargarArchivo();
                                } else {
                                    JOptionPane.showMessageDialog(null, "Archivo Incompatible");
                                }
                            } catch (IOException ex) {
                                Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    } else {
                        deshacer.setEnabled(false);
                        rehace.setEnabled(false);
                        estadoActual.clear();
                        estadoPrevio.clear();
                        programanoenCero=false;
                        programaGuardado=true;
                        this.reiniciarBotones();
                        textoAnalizar.setText("");
                        this.cargarArchivo();
                    }
                } else {
                    int response = JOptionPane.showConfirmDialog(this,"¿Quieres Guardar los Cambios realizados en el archivo?", "GUARDAR",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
                    if (response==JOptionPane.YES_OPTION){
                        try {
                            guardar.GuardarArchivoExistente(textoAnalizar.getText(), archivo);
                        } catch (IOException ex) {
                            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        JOptionPane.showMessageDialog(this, "Cambios guardados exitosamente :)");
                        deshacer.setEnabled(false);
                        rehace.setEnabled(false);
                        estadoActual.clear();
                        estadoPrevio.clear();
                        programanoenCero=false;
                        programaGuardado=true;
                        this.reiniciarBotones();
                        textoAnalizar.setText("");
                        this.cargarArchivo();
                    } else {
                        deshacer.setEnabled(false);
                        rehace.setEnabled(false);
                        estadoActual.clear();
                        estadoPrevio.clear();
                        programanoenCero=false;
                        this.reiniciarBotones();
                        programaGuardado=true;
                        textoAnalizar.setText("");
                        this.cargarArchivo();
                    }
                }
            } else{
                deshacer.setEnabled(false);
                rehace.setEnabled(false);
                estadoActual.clear();
                estadoPrevio.clear();
                programanoenCero=false;
                programaGuardado=true;
                this.reiniciarBotones();
                textoAnalizar.setText("");
                this.cargarArchivo();
            }
        }
    }//GEN-LAST:event_jMenu2MouseClicked

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        if(programanoenCero==true){
            int response = JOptionPane.showConfirmDialog(this,"¿Quieres Guardar los Cambios realizados en el archivo?", "GUARDAR",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
            if (response==JOptionPane.YES_OPTION){
                JFileChooser seleccionar = new JFileChooser();
                if(seleccionar.showDialog(null, "Guardar")==JFileChooser.APPROVE_OPTION){
                    archivo= seleccionar.getSelectedFile();
                    try {
                        String texto= textoAnalizar.getText();
                        String mensaje= guardar.GuardarArchivo(archivo, texto);
                        if(mensaje!=null){
                            JOptionPane.showMessageDialog(null, mensaje);
                            deshacer.setEnabled(false);
                            rehace.setEnabled(false);
                            estadoActual.clear();
                            this.reiniciarBotones();
                            estadoPrevio.clear();
                            programanoenCero=false;
                            programaGuardado=true;
                        } else {
                            JOptionPane.showMessageDialog(null, "Archivo Incompatible");
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        } else {
            int response = JOptionPane.showConfirmDialog(this,"¿Quieres Guardar los Cambios realizados en el archivo?", "GUARDAR",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
            if (response==JOptionPane.YES_OPTION){
                try {
                    guardar.GuardarArchivoExistente(textoAnalizar.getText(), archivo);
                } catch (IOException ex) {
                    Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                }
                JOptionPane.showMessageDialog(this, "Cambios guardados exitosamente :)");
                deshacer.setEnabled(false);
                rehace.setEnabled(false);
                estadoActual.clear();
                estadoPrevio.clear();
                this.reiniciarBotones();
                programanoenCero=false;
                programaGuardado=true;
            }

        }

    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        int response = JOptionPane.showConfirmDialog(this, "¿Quieres Guardar los Cambios realizados en el archivo?", "GUARDAR COMO", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response == JOptionPane.YES_OPTION) {
            JFileChooser seleccionar = new JFileChooser();
            if (seleccionar.showDialog(null, "Guardar") == JFileChooser.APPROVE_OPTION) {
                archivo = seleccionar.getSelectedFile();
                try {
                    String texto = textoAnalizar.getText();
                    String mensaje = guardar.GuardarArchivo(archivo, texto);
                    if (mensaje != null) {
                        JOptionPane.showMessageDialog(null, mensaje);
                        deshacer.setEnabled(false);
                        rehace.setEnabled(false);
                        this.reiniciarBotones();
                        estadoActual.clear();
                        estadoPrevio.clear();
                        programanoenCero = false;
                        programaGuardado = true;
                    } else {
                        JOptionPane.showMessageDialog(null, "Archivo Incompatible");
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void copiarTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_copiarTextMouseClicked

    }//GEN-LAST:event_copiarTextMouseClicked

    private void copiarTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copiarTextActionPerformed
         textoAnalizar.copy();
    }//GEN-LAST:event_copiarTextActionPerformed

    private void pegarTextoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pegarTextoMouseClicked

    }//GEN-LAST:event_pegarTextoMouseClicked

    private void pegarTextoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pegarTextoActionPerformed
        textoAnalizar.paste();
        TextoIDE texo = new TextoIDE(textoAnalizar.getText(), "agregar");
        agregarEstadoPrevio((getEstadoPrevio().size() + 1), texo);
        limpiarEstadoActual();
    }//GEN-LAST:event_pegarTextoActionPerformed

    private void deshacerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deshacerActionPerformed
        this.reiniciarBotones();
        System.out.println("---------UNDO----------");
        int c = 1;
        for (TextoIDE r : getEstadoPrevio()) {
            System.out.println(c + " - " + r.getAcccion());
            c++;
        }
        if (getEstadoPrevio().isEmpty()) {
            return;
        }
        TextoIDE lastReg = estadoPrevio.get(getEstadoPrevio().size());
        if (lastReg == null) {
            return;
        }
        TextoIDE oldReg;
        switch (lastReg.getAcccion()) {
            case "agregar":
                oldReg = new TextoIDE(lastReg.getTextoToken(), "agregar");
                agregarEstadoActual((getEstadoActual().size() + 1), oldReg);
                removePreviusStates(getEstadoPrevio().size());
                break;
            case "eliminar":
                oldReg = new TextoIDE(lastReg.getTextoToken(), "eliminar");
                agregarEstadoActual((getEstadoActual().size() + 1), oldReg);
                removePreviusStates(getEstadoPrevio().size());
                break;
            default:
                break;
        }
        System.out.println("---------UNDO----------");
        c = 1;
        for (TextoIDE r : getEstadoPrevio()) {
            System.out.println(c + " - " + r.getAcccion());
            c++;
        }
        textoAnalizar.setText("");
        textoAnalizar.setText(estadoPrevio.get(estadoPrevio.size()).getTextoToken());
    }//GEN-LAST:event_deshacerActionPerformed

    private void rehaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rehaceActionPerformed
        this.reiniciarBotones();
        System.out.println("---------REDO----------");
        int c = 1;
        for (TextoIDE r : getEstadoActual()) {
            System.out.println(c + " - " + r.getAcccion());
            c++;
        }
        if (getEstadoActual().isEmpty()) {
            return;
        }
        TextoIDE lastReg = estadoActual.get(getEstadoActual().size());
        if (lastReg == null) {
            return;
        }
        TextoIDE oldReg;
        switch (lastReg.getAcccion()) {
            case "agregar":
                oldReg = new TextoIDE(lastReg.getTextoToken(), "agregar");
                agregarEstadoPrevio((getEstadoPrevio().size() + 1), oldReg);
                removeNextStates(getEstadoActual().size());
                break;
            case "eliminar":
                oldReg = new TextoIDE(lastReg.getTextoToken(), "eliminar");
                agregarEstadoPrevio((getEstadoPrevio().size() + 1), oldReg);
                removeNextStates(getEstadoActual().size());
                break;
            default:
                break;
        }
        System.out.println("---------REDO----------");
        c = 1;
        for (TextoIDE r : getEstadoActual()) {
            System.out.println(c + " - " + r.getAcccion());
            c++;
        }
        textoAnalizar.setText("");
        textoAnalizar.setText(estadoPrevio.get(getEstadoPrevio().size()).getTextoToken());
    }//GEN-LAST:event_rehaceActionPerformed

    private void jMenu4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu4MouseClicked
        this.setVisible(false);
        SobreYO ventana= new SobreYO();
        ventana.setVisible(true);
      
    }//GEN-LAST:event_jMenu4MouseClicked

    private void textoAnalizarCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_textoAnalizarCaretUpdate
        //Verificamos si se emplea el texto de analizacion de tokens para poder incrementar el numero de fila y columna en la que este se encuentra
        textoAnalizar = (JTextArea)evt.getSource();
        int linea = 1;
        int columna = 1;
        try {
            int caretpos = textoAnalizar.getCaretPosition();
            linea= textoAnalizar.getLineOfOffset(caretpos);
            columna = caretpos - textoAnalizar.getLineStartOffset(linea);
            linea += 1;
        } catch(Exception ex) { }
        actualizarEstado(linea, columna);
    }//GEN-LAST:event_textoAnalizarCaretUpdate

    private void textoAnalizarPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_textoAnalizarPropertyChange

    }//GEN-LAST:event_textoAnalizarPropertyChange

    private void textoAnalizarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textoAnalizarKeyPressed

    }//GEN-LAST:event_textoAnalizarKeyPressed

    private void textoAnalizarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textoAnalizarKeyReleased
        this.reiniciarBotones();
        programaGuardado=false;
        if(textoAnalizar.getText()!=""){
            if (evt.getKeyCode()==KeyEvent.VK_BACK_SPACE){
                TextoIDE texo2 = new TextoIDE(textoAnalizar.getText(), "eliminar");
                agregarEstadoPrevio((getEstadoPrevio().size()+1), texo2);
                limpiarEstadoActual();
            } else {
                TextoIDE texo = new TextoIDE(textoAnalizar.getText(), "agregar");
                agregarEstadoPrevio((getEstadoPrevio().size()+1), texo);
                limpiarEstadoActual();
            }
        } else {
        }
    }//GEN-LAST:event_textoAnalizarKeyReleased

    private void textoAnalizarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textoAnalizarKeyTyped

    }//GEN-LAST:event_textoAnalizarKeyTyped

    private void analisisSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analisisSActionPerformed
        ManejadoAnalizadorSintactico manejadorSintactico = new ManejadoAnalizadorSintactico();
        if (manejadorSintactico != null) {
            manejadorSintactico.analisisSintactico(ManejadorAnalizadorLexico.tokenRecopilado);
            manejadorSintactico.enlistarErrores(areaErrores);
            JFileChooser fileChosser = new JFileChooser();
            if (!manejadorSintactico.existenciaError()) {
                JOptionPane.showMessageDialog(this, "Se ha creado un archivo de salida, escoge la carpeta donde quieres almacenarlo", "GUARDAR", JOptionPane.INFORMATION_MESSAGE);
                if (fileChosser.showDialog(null, "GUARDAR ANALIZADOR SINTACTICO") == JFileChooser.APPROVE_OPTION) {
                    this.escritorArchivo(fileChosser.getSelectedFile(), manejadorSintactico.getFunciones().getDocumento());
                }
            } else{
                JOptionPane.showMessageDialog(this, "Se han encontrado errores Sintacticos", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            System.out.println("error");
        }

    }//GEN-LAST:event_analisisSActionPerformed

    private void analisisSKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_analisisSKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_analisisSKeyPressed

    private void salir1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salir1ActionPerformed
        int response = JOptionPane.showConfirmDialog(this,"¿Quieres salir del Programa?", "SALIR",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if (response==JOptionPane.YES_OPTION){
            JOptionPane.showMessageDialog(this, "Saliendo...");
            System.exit(0);
        }
    }//GEN-LAST:event_salir1ActionPerformed

    private void salir1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_salir1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_salir1KeyPressed

    private void reporteTokensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reporteTokensActionPerformed
        //Nos desplazamos a la venta de tokens
        VentanaTablaToken ventana= new VentanaTablaToken();
        ventana.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_reporteTokensActionPerformed

    private void reporteTokensKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_reporteTokensKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_reporteTokensKeyPressed

    private void analizadorLexicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analizadorLexicoActionPerformed
       if(textoAnalizar.getText().isEmpty()!=true){
            ManejadorAnalizadorLexico manejador= new ManejadorAnalizadorLexico();
            if(ErroresLexicos.existenciaErrores==true){
                //Mostramos ventana de reportes
                reporteErrores.setVisible(false);
                analizadorLexico.setVisible(false);
                areaErrores.setText("");
                areaErrores.setText("Se han encontrado errores Léxicos en el aŕea de texto. Da click en el boton de reporte de errores para más informacion");
            } else {
                reporteTokens.setVisible(true);
                analisisS.setVisible(true);
            }
        } else {
            JOptionPane.showMessageDialog(this,"No hay texto dentro del area para poder realizar un analisis Léxico", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_analizadorLexicoActionPerformed

    private void analizadorLexicoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_analizadorLexicoKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_analizadorLexicoKeyPressed

   private void reiniciarBotones(){
        analisisS.setVisible(false);
        analizadorLexico.setVisible(true);
        areaErrores.setText("");
        ErroresLexicos.existenciaErrores = false;
        ManejadorAnalizadorLexico.tokenRecopilado.clear();
        ErroresLexicos.cadena.clear();
        ErroresLexicos.caracter.clear();
        ErroresLexicos.fila.clear();
        ErroresLexicos.columna.clear();
    }
   
    public void escritorArchivo(File archivo, String texto){
        FileOutputStream salida;
        try {
            salida = new FileOutputStream(archivo);
        byte [] bytxt = texto.getBytes();
            salida.write(bytxt);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Error al Guardar El Archivo");
        }
    }
     public void limpiarEstadoActual(){
        estadoActual.clear();
        rehace.setEnabled(false);
    }
      public Collection<TextoIDE> getEstadoPrevio(){
        return estadoPrevio.values();
    }
   
    public Collection<TextoIDE> getEstadoActual(){
        return estadoActual.values();
    }
     public void cargarArchivo(){
        JFileChooser buscarArchivo = new JFileChooser();
        int opcion = buscarArchivo.showOpenDialog(this);
        if(opcion == JFileChooser.APPROVE_OPTION){
            String archivo2 = buscarArchivo.getSelectedFile().getAbsolutePath();
            this.archivoALeer = archivo2;
            try{
                File archivoCargar = new File(archivoALeer);
                if(archivoCargar.exists()){
                    archivo= buscarArchivo.getSelectedFile();
                    CargaDatos cargaDatos = new CargaDatos(archivoCargar);
                    cargaDatos.analizarTexto();
                }                    
            } catch(NullPointerException e){
                System.err.println(e);
            }
        }    
    }
     public boolean agregarEstadoPrevio(int ID, TextoIDE texto){
       TextoIDE put = estadoPrevio.put(ID, texto);
       deshacer.setEnabled(true);
       return (put!=null);
    }
 
    public boolean agregarEstadoActual(int ID, TextoIDE texto){
       TextoIDE put = estadoActual.put(ID, texto);
       rehace.setEnabled(true);
       return (put!=null);
    }
     public void removePreviusStates(int key) {
        estadoPrevio.remove(key);
        if (getEstadoPrevio().isEmpty())
            deshacer.setEnabled(false); 
    }

    public void removeNextStates(int key) {
        estadoActual.remove(key);
        if (getEstadoActual().isEmpty())
            rehace.setEnabled(false);
    }
     private void actualizarEstado(int linea, int columna) {
        posicionText.setText("Linea: " + linea + " Columna: " + (columna + 1));
    }
     public JTextArea getAreaTexto(){
        return this.textoAnalizar;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton analisisS;
    private javax.swing.JButton analizadorLexico;
    private javax.swing.JTextArea areaErrores;
    private javax.swing.JMenuItem copiarText;
    private javax.swing.JMenuItem deshacer;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem pegarTexto;
    private javax.swing.JLabel posicionText;
    private javax.swing.JMenuItem rehace;
    private javax.swing.JButton reporteErrores;
    private javax.swing.JButton reporteTokens;
    private javax.swing.JButton salir1;
    private javax.swing.JTextArea textoAnalizar;
    // End of variables declaration//GEN-END:variables
}
